plugins {
    /**
     * Provide Java project layout.
     * https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_project_layout
     * Can be removed because the "com.github.davidmc24.gradle.plugin.avro"
     * already includes "groovy" plugin which extends "java" plugin.
     * I keep it for clarification.
     */
    id "java"

    /**
     * Generate avro files to classes.
     * See https://github.com/davidmc24/gradle-avro-plugin#usage
     */
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"

    /**
     * Compile Lombok annotations.
     * See https://projectlombok.org/setup/gradle#the-lombok-gradle-plugin
     */
    id "io.freefair.lombok" version "8.0.1"

    /**
     * Spring Boot repackaging.
     * See https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/html/build-tool-plugins-gradle-plugin.html
     */
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group 'com.emeraldhieu.springboottestcontainer'
version '1.0-SNAPSHOT'

/**
 * Select specific JDK.
 * See https://stackoverflow.com/questions/18487406/how-do-i-tell-gradle-to-use-specific-jdk-version#66443594
 * See https://docs.gradle.org/current/userguide/toolchains.html
 */
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
    gradlePluginPortal()
}

ext.springBootVersion = "3.0.0"
ext.lombokVersion = "1.18.24"
ext.mapstructVersion = "1.5.2.Final"
ext.testContainersVersion = "1.18.3"
ext.postgresqlVersion = "42.6.0"
ext.avroVersion = "1.11.0"
ext.kafkaAvroSerializerVersion = "7.3.0"
ext.liquibaseSlf4jVersion = "4.1.0"

dependencies {
    /**
     * Import Maven BOM
     * https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import
     */
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.kafka:spring-kafka"
    runtimeOnly "org.postgresql:postgresql"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    /**
     * Load Liquibase schema files for data migration.
     */
    implementation "org.liquibase:liquibase-core"

    /**
     * Log Liquibase
     See https://stackoverflow.com/questions/20880783/how-to-get-liquibase-to-log-using-slf4j#20880784
     */
    implementation "com.mattbertolini:liquibase-slf4j:${liquibaseSlf4jVersion}"

    /**
     * Add mapstruct dependency and configure mapstruct annotation processor.
     * See https://github.com/mapstruct/mapstruct#gradle
     */
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    /**
     * Use common test-containers' annotations and postgres, kafka containers.
     */
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:kafka:${testContainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"

    /**
     * Use Avro annotations from the package "org.apache.avro".
     */
    implementation "org.apache.avro:avro:${avroVersion}"

    /**
     * Use "org.apache.avro.specific" and "org.apache.avro.message".
     */
    runtimeOnly "io.confluent:kafka-avro-serializer:${kafkaAvroSerializerVersion}"
}

generateAvroJava {
    source("${projectDir}/src/main/resources/avro")
}

test {
    useJUnitPlatform()

    /**
     * Stream Gradle's logs to console
     * See https://stackoverflow.com/questions/9356543/logging-while-testing-through-gradle#9357286
     */
    testLogging.showStandardStreams = true
}
